import com.redis.RedisClient
import org.huwtl.penfold.app.store.RedisEventStore

import org.huwtl.penfold.app.support.json.EventSerializer
import org.huwtl.penfold.command._
import org.huwtl.penfold.command.CreateJob
import org.huwtl.penfold.domain.event.{JobCompleted, JobTriggered, JobCreated}


import org.huwtl.penfold.domain.store.DomainRepository
import org.huwtl.penfold.domain.model.{Job, Payload, QueueName, Id}
import org.huwtl.penfold.query.{RedisQueryStoreEventPersister, RedisNewEventsProvider, QueryStoreUpdater}
import org.joda.time.DateTime

Job.create(Id("1"), QueueName(""), DateTime.now(), Payload(Map("a" -> "123", "b" -> 1))).trigger().start().complete()
























Job.create(Id("1"), QueueName(""), Payload(Map("a" -> "123", "b" -> 1))).trigger().start().complete()











































val job: Job = Job.loadFromHistory(JobCreated(Id("1"), QueueName(""), DateTime.now(), DateTime.now(), Payload(Map("a" -> "123", "b" -> 1))) :: JobTriggered(Id("1")) :: JobCompleted(Id("1")) :: Nil)

List("a", "b", "c").foldLeft(List[String]())((b, a) => a :: b)
val client = new RedisClient("localhost", 6379)























val serializer = new EventSerializer




val eventStore = new RedisEventStore(client, serializer)


val notifier = new QueryStoreUpdater(new RedisNewEventsProvider(client, serializer), new RedisQueryStoreEventPersister(client))
val domainRepository = new DomainRepository(eventStore, notifier)








val dispatcher = new CommandDispatcher(Map[Class[_ <: Command], CommandHandler[_ <: Command]](//
  classOf[CreateJob] -> new CreateJobHandler(domainRepository), //
  classOf[CreateFutureJob] -> new CreateFutureJobHandler(domainRepository), //
  classOf[TriggerJob] -> new TriggerJobHandler(domainRepository), //
  classOf[StartJob] -> new StartJobHandler(domainRepository), //
  classOf[CompleteJob] -> new CompleteJobHandler(domainRepository), //
  classOf[CancelJob] -> new CancelJobHandler(domainRepository) //
))




val createJob: Command = new CreateJob(Id("1"), QueueName(""), Payload(Map("a" -> "123", "b" -> 1)))



dispatcher.dispatch(createJob)































































val createFutureJob: Command = new CreateFutureJob(Id("2"), QueueName(""), DateTime.now(), Payload(Map("a" -> "123", "b" -> 1)))



dispatcher.dispatch(createFutureJob)




































































































val triggerJob: Command = new TriggerJob(Id("3"))
dispatcher.dispatch(triggerJob)




















































val startJob = new StartJob(Id("3"))
dispatcher.dispatch(startJob)


















































val startJob2 = new StartJob(Id("3"))
dispatcher.dispatch(startJob2)


















































































































































































































































































































































































































































































